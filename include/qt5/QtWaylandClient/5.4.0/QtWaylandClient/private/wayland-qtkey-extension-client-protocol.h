/* Generated by wayland-scanner 1.17.0 */

#ifndef QTKEY_EXTENSION_CLIENT_PROTOCOL_H
#define QTKEY_EXTENSION_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_qtkey_extension The qtkey_extension protocol
 * @section page_ifaces_qtkey_extension Interfaces
 * - @subpage page_iface_qt_key_extension - 
 * @section page_copyright_qtkey_extension Copyright
 * <pre>
 *
 * Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 * Contact: http://www.qt-project.org/legal
 *
 * This file is part of the plugins of the Qt Toolkit.
 *
 * $QT_BEGIN_LICENSE:BSD$
 * You may use this file under the terms of the BSD license as follows:
 *
 * "Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 * * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names
 * of its contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
 *
 * $QT_END_LICENSE$
 * </pre>
 */
struct qt_key_extension;
struct wl_surface;

/**
 * @page page_iface_qt_key_extension qt_key_extension
 * @section page_iface_qt_key_extension_api API
 * See @ref iface_qt_key_extension.
 */
/**
 * @defgroup iface_qt_key_extension The qt_key_extension interface
 */
extern const struct wl_interface qt_key_extension_interface;

/**
 * @ingroup iface_qt_key_extension
 * @struct qt_key_extension_listener
 */
struct qt_key_extension_listener {
	/**
	 * qtkey event
	 *
	 * Serialized QKeyEvent
	 */
	void (*qtkey)(void *data,
		      struct qt_key_extension *qt_key_extension,
		      struct wl_surface *surface,
		      uint32_t time,
		      uint32_t type,
		      uint32_t key,
		      uint32_t modifiers,
		      uint32_t nativeScanCode,
		      uint32_t nativeVirtualKey,
		      uint32_t nativeModifiers,
		      const char *text,
		      uint32_t autorepeat,
		      uint32_t count);
};

/**
 * @ingroup iface_qt_key_extension
 */
static inline int
qt_key_extension_add_listener(struct qt_key_extension *qt_key_extension,
			      const struct qt_key_extension_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) qt_key_extension,
				     (void (**)(void)) listener, data);
}

#define QT_KEY_EXTENSION_DUMMY 0

/**
 * @ingroup iface_qt_key_extension
 */
#define QT_KEY_EXTENSION_QTKEY_SINCE_VERSION 1

/**
 * @ingroup iface_qt_key_extension
 */
#define QT_KEY_EXTENSION_DUMMY_SINCE_VERSION 1

/** @ingroup iface_qt_key_extension */
static inline void
qt_key_extension_set_user_data(struct qt_key_extension *qt_key_extension, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) qt_key_extension, user_data);
}

/** @ingroup iface_qt_key_extension */
static inline void *
qt_key_extension_get_user_data(struct qt_key_extension *qt_key_extension)
{
	return wl_proxy_get_user_data((struct wl_proxy *) qt_key_extension);
}

static inline uint32_t
qt_key_extension_get_version(struct qt_key_extension *qt_key_extension)
{
	return wl_proxy_get_version((struct wl_proxy *) qt_key_extension);
}

/** @ingroup iface_qt_key_extension */
static inline void
qt_key_extension_destroy(struct qt_key_extension *qt_key_extension)
{
	wl_proxy_destroy((struct wl_proxy *) qt_key_extension);
}

/**
 * @ingroup iface_qt_key_extension
 */
static inline void
qt_key_extension_dummy(struct qt_key_extension *qt_key_extension)
{
	wl_proxy_marshal((struct wl_proxy *) qt_key_extension,
			 QT_KEY_EXTENSION_DUMMY);
}

#ifdef  __cplusplus
}
#endif

#endif
